import java.util.Scanner;
import java.util.ArrayList;
import java.io.File;

public class CustomProgram {
    public static void main(String[] args) throws Exception {
	// reads the provided customPage.html into list
	Scanner in = new Scanner(new File("customPage.html"));
	ArrayList<String> list = new ArrayList<>();
	while(in.hasNextLine()) list.add(in.nextLine());
	String getName = "", changeName = "";

	// update list to reflect changes requested through command line args
	// TODO: Complete this section
	if(args.length > 0)
	    for(String arg : args[0].split("&")) {
		String[] keyValuePair = arg.split("=");
		switch(keyValuePair[0]) {
		case "name":
		    // TODO: when a greeting is selected (below), this
		    // argument's value should be displayed in that greeting
		    if (keyValuePair.length == 2) {
			    getName = keyValuePair[1];
		    }
		    break;
		case "background":
		    // TODO: when background="Dark", the body's color should be
		    // set to white and it's background-color should be set to
		    // black (the opposite of how they are set for "Light" by
		    // default.
		    if (keyValuePair[1].equals("Dark")) {
			    list.set(18, "background-color: black;");
			    list.set(19, "color: white;");
		    } else if (keyValuePair[1].equals("Light")) {
			    list.set(18, "background-color: white;");
			    list.set(19, "color: black;");
		    }
		    break;
		case "Greeting":
		    // TODO: when this argument is present and =true, an <h1>
		    // element containing the text "Welcome Stranger" should
		    // be inserted as the first element within the body.  If
		    // a non-empty-string name is provided (see above), that
		    // name should be used in place of the word Stranger in
		    // this greeting.
		    changeName = getName;
		    if (keyValuePair[1].equals("true") && changeName.equals("")) {
			    list.add(24, "<h1> Welcome Stranger </h1>");
		    } else if (keyValuePair[1].equals("true") && !changeName.equals("")) {
			    list.add(24, "<h1> Welcome "+ changeName +" </h1>");
		    }
		    break;
		case "Time":
		    // TODO: when this argument is present and =true, a <p>
		    // element containing the text: "Page Updated: date-time"
		    // should be inserted as the last element within the body.
		    // Note that the date-time part of this paragraph should
		    // be dynamically generated by calling
		    // java.time.LocalDateTime.now()
		    if (keyValuePair[1].equals("true")) {
			    list.add(36, "<p> Page Updated: "+ java.time.LocalDateTime.now() +" </p>");
		    }
		    break;
		case "SuppressOptions":
		    // TODO: when this argument is present and =true, the
		    // customization controls should be removed from the page.
		    // Everything from and including the <h1> label through the
		    // final </ul> should be omitted to accomplish this.
		    if (keyValuePair[1].equals("true")) {
			    for (int i = 24; i < 38; i++) {
				    list.remove(24);
			    }
		    }
		    break;
		}
	    }
	
	// print the resulting html out to system.out (standard out)
	for(String line : list)
	    System.out.println(line);
    }
}
